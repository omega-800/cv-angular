@use "src/scss/variables.scss" as variables;
@use "src/scss/screens.scss" as screens;

$range-width: 80%;
$range-height: variables.$elem-size;
$thumb-radius: calc(0.5 * $range-height);
$range-useful-width: calc(100% - $range-height);

@mixin track() {
    background: none;
    height: 100%;
    width: 100%;
}

@mixin thumb() {
    background: currentcolor;
    border: none;
    border-radius: 0;
    pointer-events: auto;
    width: $range-height;
    height: $range-height;
    border-radius: 50%;
}

:host {
    margin: variables.$elem-padding;
    border-top: variables.$defborderthin;

    grid-template-areas: "title" "range";
    grid-template-rows: auto auto;
    grid-template-columns: auto;

    & .categoryTitle {
        grid-area: title;
        text-align: center;
    }

    @include screens.laptop-screen {
        grid-template-areas: "title range";
        grid-template-rows: auto;
        grid-template-columns: 25% auto;
        border-top: none;

        & .categoryTitle {
            text-align: left;
        }
    }

    @include screens.desktop-screen {
        grid-template-areas: "title range";
        grid-template-rows: auto;
        grid-template-columns: 20% auto;
        border-top: none;

        & .categoryTitle {
            text-align: left;
        }
    }

    @include screens.large-screen {
        grid-template-areas: "title range";
        grid-template-rows: auto;
        grid-template-columns: 15% auto;
        border-top: none;

        & .categoryTitle {
            text-align: left;
        }
    }

    & .range {
        grid-area: range;
        margin: auto 0;

        & output {
            width: calc((100% - $range-width) / 2);
            font-family: variables.$mono;

            &:first-child {
                text-align: left;
            }

            &:last-child {
                text-align: right;
            }
        }

        & .wrap {
            display: grid;
            grid-template-rows: max-content $range-height;
            width: $range-width;
            grid-template-columns: 1fr;
            overflow: hidden;
            position: relative;
            background: linear-gradient(0deg, variables.$light2 $range-height, transparent 0);
            border-radius: $range-height;

            & .sr-only {
                position: absolute;
                clip-path: inset(50%);
            }

            & input[type="range"] {
                grid-column: 1;
                grid-row: 2;
                z-index: variables.$top;

                &::-webkit-slider-runnable-track,
                &::-webkit-slider-thumb,
                & {
                    -webkit-appearance: none;
                }

                background: none;
                color: variables.$dark1;
                font: inherit;
                margin: 0;
                pointer-events: none;

                &::-webkit-slider-runnable-track {
                    @include track;
                }

                &::-moz-range-track {
                    @include track;
                }

                &::-webkit-slider-thumb {
                    @include thumb;
                }

                &::-moz-range-thumb {
                    @include thumb;
                }
            }

            --dif: calc(var(--max) - var(--min));

            &::before,
            &::after {
                grid-column: 1 / span 2;
                grid-row: 2;
                height: 1em;
                background: variables.$cool;
                content: "";
            }

            &::before {
                margin-left: calc(#{$thumb-radius} + (var(--a) - var(--min)) / var(--dif) *#{$range-useful-width});
                width: calc((var(--b) - var(--a)) / var(--dif) *#{$range-useful-width});
            }

            &::after {
                margin-left: calc(#{$thumb-radius} + (var(--b) - var(--min)) / var(--dif) *#{$range-useful-width});
                width: calc((var(--a) - var(--b)) / var(--dif) *#{$range-useful-width});
            }
        }
    }
}